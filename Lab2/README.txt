Changes: 		Added a single printf statement to main.c in order to modify the copyright message
				Added lines 1314-1318 in proc.c

Explanation: 	The main.c modifications are pretty simple - just print an extra statement when the copyright message is printed.
				The base scheduler runs on a priority system - processes are assigned a priority value, starting at 0 (most important) and ending at NR_SCHED_QUEUES (the IDLE process). A set of queues holds these processes until they are selected by the scheduler to be run. The default scheduler picks by first by priority (finds the lowest-number queue with a nonzero number of processes), then by first-in first-out (it's a queue, so it accesses the head of the queue and uses that). There's a debug flag - DEBUG_RACE - that can be turned on that changes the second scheduler condition to pick a random queue element, calling random_proc. random_proc counts the number of processes n in the queue, generates a random number r in the range 0-n, then starts with a pointer at the head of the queue and moves the pointer r times. This serves to select a random process in a given queue, whose head pointer is passed in as an argument the the function.
				Proc.c returns a pointer to the process selected.
				The proc.c modifications occasionally (20% of the time) make the scheduler pass over a queue, selecting from the next queue instead. It uses read_tsc_64, which gets a 64-bit representation of the current CPU time counter. This is used as a pseudorandom number. The reason that I did that was that occasionally skipping a queue results in much less slowdown than reordering the queues entirely, and taking 15+ minutes to reboot makes making a slight modification really annoying.
				Probably the better solution was to implement an array of queues that would be shuffled each time a process would be chosen, but the function calls associated with a truly random shuffle would show the scheduler into unusability. Also, actually getting a random number was difficult. Srand() doesn't work properly within the kernel, so I ended up taking the raw clock time and using that instead of using it as a seed for a pseudorandom algorithm.
